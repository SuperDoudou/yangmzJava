<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 为这个mapper指定一个唯一的namespace，namespace的值习惯上设置成包名+sql映射文件名，这样就能够保证namespace的值是唯一的
例如namespace="me.gacl.mapping.userMapper"就是me.gacl.mapping(包名)+userMapper(userMapper.xml文件去除后缀)
 -->
<mapper namespace="com.yangmz.sso.model.userMapper">
    <!-- 在select标签中编写查询的SQL语句， 设置select标签的id属性为getUser，id属性值必须是唯一的，不能够重复
    使用parameterType属性指明查询时使用的参数类型，resultType属性指明查询返回的结果集类型
    resultType="me.gacl.domain.User"就表示将查询结果封装成一个User类的对象返回
    User类就是users表所对应的实体类
    -->
    <!--
        根据id查询得到一个user对象
     -->
    <select id="getUserByID" parameterType="Long"
            resultType="com.yangmz.base.model.User">
        select * from users where id= #{id}
    </select>

    <select id="getSimpleUserByEmail" parameterType="String"
            resultType="com.yangmz.base.model.User">
        SELECT id,email,name FROM users WHERE email = #{email}
    </select>

    <insert id="createUser" parameterType="Map" >
        INSERT INTO users (
        email, name, password,portraitAddress, updateTime, createTime)
        VALUES ( #{email},  #{name}, #{password}, #{portraitAddress},
                 #{updateTime}, #{createTime})
    </insert>

    <update id="updateVerifyCode" parameterType="Map">
        UPDATE users
        SET verifyCode = #{verifyCode},
            verifyCodeRetry = #{verifyCodeRetry},
            verifyCodeTime = #{verifyCodeTime}
        WHERE email = #{email}
    </update>

    <select id="getUserByToken" parameterType="Map"
            resultType="com.yangmz.base.model.User">
        SELECT * FROM users
        WHERE id = #{id}
        AND token = #{token}
    </select>

    <select id="getUserByVerifyCode" parameterType="Map"
            resultType="com.yangmz.base.model.User">
        SELECT * FROM users
        WHERE email = #{email}
        AND verifyCode = #{verifyCode}
    </select>

    <select id="getUserByPassword" parameterType="Map"
            resultType="com.yangmz.base.model.User">
        SELECT * FROM users
        WHERE email = #{email}
        AND password = #{password}
    </select>

    <select id="getLoginUserByEmail" parameterType="Map"
            resultType="com.yangmz.base.model.User">
        SELECT * FROM users
        WHERE email = #{email}
    </select>

    <update id="updateToken" parameterType="Map">
        UPDATE users
        SET token = #{token}
        WHERE id = #{id}
    </update>


</mapper>