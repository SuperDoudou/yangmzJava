<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 为这个mapper指定一个唯一的namespace，namespace的值习惯上设置成包名+sql映射文件名，这样就能够保证namespace的值是唯一的
例如namespace="me.gacl.mapping.userMapper"就是me.gacl.mapping(包名)+userMapper(userMapper.xml文件去除后缀)
 -->
<mapper namespace="com.yangmz.user.model.userMapper">
    <!-- 在select标签中编写查询的SQL语句， 设置select标签的id属性为getUser，id属性值必须是唯一的，不能够重复
    使用parameterType属性指明查询时使用的参数类型，resultType属性指明查询返回的结果集类型
    resultType="me.gacl.domain.User"就表示将查询结果封装成一个User类的对象返回
    User类就是users表所对应的实体类
    -->
    <!--
        根据id查询得到一个user对象
     -->
    <select id="getUserById" parameterType="Long"
            resultType="com.yangmz.base.model.User">
        select id, name, portraitAddress from users where id= #{userId}
    </select>

    <select id="getUserEmailByID" parameterType="Long"
            resultType="com.yangmz.base.model.User">
        select id, name, portraitAddress, email from users where id= #{userId}
    </select>

    <select id="getUserByEmail" parameterType="String"
            resultType="com.yangmz.base.model.User">
        SELECT id,email,name FROM users WHERE email = #{email}
    </select>

    <select id="getUserByToken" parameterType="Map"
            resultType="com.yangmz.base.model.User">
        SELECT id,email,name FROM users
        WHERE id = #{id}
        AND token = #{token}
    </select>

    <select id="getUserList" parameterType="List"
            resultType="com.yangmz.base.model.User">
        SELECT id,portraitAddress,name
        FROM users
        WHERE id IN
        <foreach item="userId" index="index" collection="list"
                 open="(" separator="," close=")">
            #{userId}
        </foreach>
    </select>

    <update id="updateUserPortrait" parameterType="Map">
        UPDATE users
        SET portraitAddress = #{portraitAddress}
        WHERE id = #{id}
    </update>

    <update id="updateUserName" parameterType="Map">
        UPDATE users
        SET name = #{name}
        WHERE id = #{id}
    </update>

    <update id="updateDetail" parameterType="Map">
        UPDATE users
        <if test='type != null and type == "wechat" '>
            SET wechatDetail = #{value}
        </if>
        <if test='type != null and type == "taobao" '>
            SET taobaoDetail = #{value}
        </if>
        <if test='type != null and type == "weibo" '>
            SET weiboDetail = #{value}
        </if>
        WHERE id = #{id}
    </update>

    <select id="getUserByPassword" parameterType="Map"
            resultType="com.yangmz.base.model.User">
        SELECT * FROM users
        WHERE id = #{id}
        AND password = #{password}
    </select>

    <update id="updateDetailValid" parameterType="Map">
        UPDATE users
        <if test='type != null and type == "wechat" '>
            SET wechatDetailValid = #{value}
        </if>
        <if test='type != null and type == "taobao" '>
            SET taobaoDetailValid = #{value}
        </if>
        <if test='type != null and type == "weibo" '>
            SET weiboDetailValid = #{value}
        </if>
        WHERE id = #{id}
    </update>
    <update id="updateUserPassword" parameterType="Map">
        UPDATE users
        SET password = #{password}
        WHERE id = #{id}
    </update>

    <select id="getUserByName" parameterType="String"
            resultType="com.yangmz.base.model.User">
        SELECT id FROM users
        WHERE name = #{name}
    </select>

</mapper>